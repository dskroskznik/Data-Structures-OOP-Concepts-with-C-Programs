//#ifndef DIJKSTRA_HPP
//#define DIJKSTRA_HPP

#include <climits> 
#include <iostream>
#include <set>
#include <list>
#include <string>
#include <vector>
#include "GraphBase.hpp"

class Graph : public GraphBase {
    public:
        Graph();
        ~Graph();
        void addVertex(std::string label);
        void removeVertex(std::string label);
        void addEdge(std::string label1, std::string label2, unsigned long weight);
        void removeEdge(std::string label1, std::string label2);
        unsigned long shortestPath(std::string startLabel, std::string endLabel, std::vector<std::string> &path);

    private:
        std::list<std::string, std::set<std::string, unsigned long>>* graph;
};

void Graph::addVertex(std::string label){

    graph.push_back(); // adds vertex into the map
    
}


void Graph::removeVertex(std::string label){
    graph.erase(label);

    for(auto vertex : graph){
        vertex.second.erase(label);
    }
}

void Graph::addEdge(std::string label1, std::string label2, unsigned long weight){
    for(auto vertex : graph){
        if(vertex.first == label1){
            vertex.second.insert(std::pair<std::string, unsigned long>(label2, weight));
        }
    }
}

void Graph::removeEdge(std::string label1, std::string label2){
    for(auto vertex : graph){
        if(vertex.first == label1){
            vertex.second.erase(label2);
        }
    }
}

unsigned long Graph::shortestPath(std::string startLabel, std::string endLabel, std::vector<std::string> &path){
}

int main() {
    Graph g;
    int V = 5;
    std::vector<std::string> vertices1 { "1", "2", "3", "4", "5", "6" };
    std::vector<std::tuple<std::string, std::string, unsigned long>> edges1 {
    {"1", "2", 7}, {"1", "3", 9}, {"1", "6", 14}, {"2", "3", 10}, {"2", "4", 15}, {"3", "4", 11},
    {"3", "6", 2}, {"4", "5", 6}, {"5", "6", 9} };

    for (const auto label : vertices1) g.addVertex(label);
    for (const auto &e : edges1) g.addEdge(std::get<0>(e), std::get<1>(e), std::get<2>(e));

    for (int i=0; i<V; ++i){
        std::cout << "Adjacency list of vertex: " << i << "\n" << i << ": ";
        for 

    }

}
//#endif